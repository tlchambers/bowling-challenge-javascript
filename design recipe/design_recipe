Bowling Multi-Class Planned Design Recipe
1. Describe the Problem
Put or write the user story here. Add any clarifying notes you might have.

2. Design the Class System
Consider diagramming out the classes and their relationships. Take care to focus on the details you see as important, not everything. The diagram below uses asciiflow.com but you could also use excalidraw.com, draw.io, or miro.com

┌────────────────────────────┐
│BowlingScorecard            │
│ - Constructor(player)      │
│ - player = player          │
│ - totalframes = [ ]        │
│ ...............            │
│ - add                      │
│ - calculateScore           │
└───────────┬────────────────┘
            │
            │ owns a list of
            ▼
┌─────────────────────────┐
│ Player                  │
│ - Constructor(name)     │
│ - name = name           │
│ - frame = [ ]           │
│ ...............         │
│ - roll_1(score1)       │
│ - roll_2(score2)       │
└─────────────────────────┘
Also design the interface of each class in more detail.

class Player {
  Constructor(name) {
    this.name = name
    this.frameScore = []
  }
  playerName() {
    this.name
  }
  firstRoll(score1) {

  }
  secondRoll(score2) {

  }
  frameScore() {
    return this.frame
  }
}



class BowlingScorecard {
  Constructor(player) {
    this.playerName = player
    this.all10Frames = [ ]
  }
  add(frame) {
    ; this.all10Frames.push(frame)
  }
  all10Frams() {
    ; return all scores from all 10 frames
  }
  calculateScore() {
    this.all10Frames
  }
}




3. Create Examples as Integration Tests
Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

# EXAMPLE

# Gets a frames from Player class when called
const player1Frame = new Player("John")
player1.firstRoll(1)
player1.secondRoll(0)

const scoreCard = new BowlingScorecard(player1Frame)
scoreCard.add(frame)

scoreCard.all10Frames # => [frame]



4. Create Examples as Unit Tests
Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

# EXAMPLE

# creates a new player and return player's name
const player1Frame = new Player("John")
expect(player1.name).toEqual("John")

# creates a new player and return first roll score in frameScore
const player1 = new Player("John")
player1.firstRoll(2)

expect(player.frameScore).toEqual([2])

# creates a new player and return first roll and second roll scores in frameScore
const player1 = new Player("John")
player1.firstRoll(2)
player1.secordRoll(5)

expect(player.frameScore).toEqual([2, 5])


# first roll and secord roll score entered cannot be above 10
# if first roll score is 10, push 'X' into frameScore, and print 'end of frame, second roll not valid'


Encode each example as a test. You can add to the above list as you go.

5. Implement the Behaviour
After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

